import java.util.Date;
import java.util.ArrayList;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Scanner;

/**
* TP d'Architectures Logicielles Planification d'une réunion de travail
* @author Anthony REY <anthony.rey@etu.univ-savoie.fr>
* @author Yohann Berthon <yohann.berthon@etu.univ-savoie.fr>
* @since 15/04/2013
*/
public class Planification{

	private TupleSpace ts;
	private SimpleDateFormat formatter;
	
	/*
	* Agents
	*/
	private op void participant();
	private op void changeParticipant(String nom);
	private op void organisateur();
	private op void menu();
	private op void participantSaisirDates(String nom);
	private op void participantDatesPreferentielles(String nom);
	private op void participantDatesExclues(String nom);
	
	private void menu(){
		Scanner sc = new Scanner(System.in);
		System.out.println("# Organisation ([q] pour quitter)");
		System.out.println("1) Définir l'intervalle");
		System.out.println("2) Ajouter un participant");
		System.out.println("3) Modifier un participant");
		System.out.println("4) Calculer la meilleure date");
		String choix = sc.nextLine();
		if(choix.equals("1")){
			send organisateur();
		}
		else if (choix.equals("2")){
			send participant();
		}
		else if (choix.equals("3")){
			System.out.println(choix);
		}
		else if (choix.equals("4")){
			System.out.println(this.bestDate().toString());
			send menu();
		}
		else if(choix.equals("q")){
			System.out.println("Au revoir");
		}
		else{
			send menu();
		}
		
	}
	
	private void changeParticipant(String nom){
		Scanner sc = new Scanner(System.in);
		System.out.println("Que voulez-vous faire pour "+nom);
		System.out.println("1) Changer ses dates");
		String choix = sc.nextLine();
		if(choix.equals("1")){
			send participantSaisirDates(nom);
		}
		else{
			send menu();
		}
	}
	
	private void participant(){
		Scanner sc = new Scanner(System.in);
		System.out.println("Nom du participant :");
		String nom = sc.nextLine();
		if(nom.equals("q")){
			System.out.println("Pas de participant ajouté");
			send menu();
		}
		else{
			ArrayList<Participant> participants = (ArrayList<Participant>) this.ts.rd("participants");
			Participant participant = new Participant(nom);
			participants.add(participant);
			send participantSaisirDates(nom);
		}
		
	}
	
	private void participantSaisirDates(String nom){
		Scanner sc = new Scanner(System.in);
		System.out.println("# Dates pour "+nom);
		System.out.println("1) Exclues");
		System.out.println("2) Préférentielles");
		String choix = sc.nextLine();
		if(choix.equals("1")){
			send participantDatesExclues(nom);
		}
		else if (choix.equals("2")){
			send participantDatesPreferentielles(nom);
		}
		else if (choix.equals("q")){
			send changeParticipant(nom);
		}
		else{
			System.out.println("Attention : Option invalide");
			send participantSaisirDates(nom);
		}
	}
	
	private void participantDatesExclues(String nom){
		Scanner sc = new Scanner(System.in);
		System.out.println("Ajouter une date exclue pour "+nom);
		String date = sc.nextLine();
		if(date.equals("q")){
			send participantSaisirDates(nom);
		}
		else{
			try{
				this.setDateExclueOfParticipant(nom, this.formatter.parse(date));
				send participantDatesExclues(nom);
			}
			catch(Exception e){
				System.out.println("La date ou le nom du participant ne convient pas");
				send participantDatesExclues(nom);
			}
		}
	}
	
	private void participantDatesPreferentielles(String nom){
		Scanner sc = new Scanner(System.in);
		System.out.println("Ajouter une date préférentielle pour "+nom);
		String date = sc.nextLine();
		if(date.equals("q")){
			send participantSaisirDates(nom);
		}
		else{
			try{
				this.setDatePreferentielleOfParticipant(nom, this.formatter.parse(date));
				send participantDatesPreferentielles(nom);
			}
			catch(Exception e){
				System.out.println("La date ou le nom du participant ne convient pas");
				send menu();
			}
		}
	}
	
	private void organisateur(){
		Scanner sc = new Scanner(System.in);
		System.out.println("Veuillez choisir la date de début :");
		String dateDebut = sc.nextLine();
		System.out.println("Veuillez choisir la date de fin :");
		String dateFin = sc.nextLine();
		if(dateDebut.equals("q") || dateFin.equals("q")){
			send menu();
		}
		else{
			try{
				this.setIntervalle(this.formatter.parse(dateDebut), this.formatter.parse(dateFin));
				System.err.println("La date a bien été définie");
				send menu();
			}
			catch(Exception e){
				System.err.println("Le format de date n'es pas respecté");
				send organisateur();
			}
		}
	}
	
	
	
	
	
	/**
	* Constructeur
	*/
	public Planification(){
		this.initialize();
		send menu();
	}
	
	private void setDateExclueOfParticipant(String name, Date date){
		ArrayList<Participant> participants = (ArrayList<Participant>) this.ts.rd("participants");
		for(Participant p : participants){
			if(name.equals(p.getNom())){
				p.addDateExclue(date);
			}
		}
		this.ts.add("participants", participants);
	}
	
	private void setDatePreferentielleOfParticipant(String name, Date date){
		ArrayList<Participant> participants = (ArrayList<Participant>) this.ts.rd("participants");
		for(Participant p : participants){
			if(name.equals(p.getNom())){
				p.addDatePreferentielle(date);
			}
		}
		this.ts.add("participants", participants);
	}
	
	/**
	* Initialisation du constructeur
	*/
	private void initialize(){
		this.ts = new TupleSpace();
		this.formatter = new SimpleDateFormat("dd/MM/yyyy");
		this.ts.out("date debut", new Date());
		this.ts.out("date fin", new Date());
		ArrayList<Participant> participants = new ArrayList<Participant>();
		this.ts.out("participants", participants);
	}
	
	/**
	* Méthode isDansIntervalle
	*/
	public boolean isDansIntervalle(Date date){
		Date dateDebut = (Date) this.ts.rd("date debut");
		Date dateFin = (Date) this.ts.rd("date fin");
		if(dateDebut.before(date) && dateFin.after(date)){
			return true;
		}
		return false;
	}
	
	/**
	* Méthode isDansIntervalle
	*/
	public boolean isDansIntervalle(String stringDate){
		try{
			return this.isDansIntervalle(this.formatter.parse(stringDate));
		}
		catch(Exception e){
			System.err.println("Le format de date n'es pas respecté");
			System.exit(0);
		}
		return false;
	}
	
	/**
	* Méthode setIntervalle
	*/
	public void setIntervalle(Date debut, Date fin){
		if(debut.before(fin)){
			this.ts.add("date debut", debut);
			this.ts.add("date fin", fin);
		}
		else{
			System.err.println("Attention : La date de début n'est pas avant la date de fin");
			System.exit(0);
		}
	}
	
	/**
	* Méthode setIntervalle
	*/
	public void setIntervalle(String stringDebut, String stringFin){
		try{
			Date debut = this.formatter.parse(stringDebut);
			Date fin = this.formatter.parse(stringFin);
			this.setIntervalle(debut, fin);
		}
		catch(Exception e){
			System.err.println("Le format de date n'es pas respecté");
			System.exit(0);
		}
	}
	
	/**
	* Vérifie si 3/4 des participants sont disponibles à une date
	* @param date La date à vérifier pour les participants 
	*/
	private boolean isTroisQuartParticipants(Date date){
		ArrayList<Participant> participants = (ArrayList<Participant>) this.ts.rd("participants");
		double size = (double)participants.size();
		double troisQuart = ((3*size) /4);
		double nbDisponibles = 0.0;
		for(int i = 0; i < size; i++){
			if(participants.get(i).isDispoPourDate(date)){
				nbDisponibles = nbDisponibles+1.0;
			}
		}
		if(nbDisponibles >= troisQuart){
			return true;
		}
		return false;
	}
	
	private int compteDatePreferentielle(Date date){
		ArrayList<Participant> participants = (ArrayList<Participant>) this.ts.rd("participants");
		int cpt = 0;
		for(Participant participant: participants){
			if(participant.checkDatePreferentielle(date)){
				cpt++;
			}
		}
		return cpt;
	}
	
	private Date bestDate(){
		Date dateCourante = (Date) this.ts.rd("date debut");
		Date dateFin = (Date) this.ts.rd("date fin");
		Date dateChoisie = (Date) this.ts.rd("date debut");
		int compte = this.compteDatePreferentielle(dateChoisie);
		while(dateCourante.before(dateFin)){
			if(this.isTroisQuartParticipants(dateCourante)){
				if(compte < this.compteDatePreferentielle(dateCourante)){
					dateChoisie = dateCourante;
					compte = this.compteDatePreferentielle(dateChoisie);
				}
			}
			dateCourante = this.addDays(dateCourante, 1);
		}
		return dateChoisie;
	}
	
	private Date addDays(Date date, int days){
		Calendar cal = Calendar.getInstance();
		cal.setTime(date);
		cal.add(Calendar.DATE, days);
		return cal.getTime();
	}
	
	
	/**
	* Méthode testTS
	*/
	public void testTS(){
		System.out.println("== Début du jeu de tests ==");
		TupleSpace tuples = new TupleSpace();
		tuples.out("42", 33);
		tuples.out("42", 42);
		System.out.println(tuples.rd("42"));
		tuples.add("42", 25);
		System.out.println(tuples.rd("42"));
		System.out.println(tuples.in("42"));
		System.out.println(tuples.in("42"));
		System.out.println(tuples.in("42"));
		System.out.println("== Fin du jeu de tests ==");
	}

	/**
	* Lancement du programme
	*/
	public static void main(String[] args){
		new Planification();
	}
}
