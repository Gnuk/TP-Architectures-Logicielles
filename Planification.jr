import java.util.Date;
import java.util.ArrayList;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Scanner;

/**
* TP d'Architectures Logicielles Planification d'une réunion de travail
* @author Anthony REY <anthony.rey@etu.univ-savoie.fr>
* @author Yohann Berthon <yohann.berthon@etu.univ-savoie.fr>
* @since 15/04/2013
*/
public class Planification{

	private TupleSpace ts;
	private SimpleDateFormat formatter;
	
	////////////
	// Agents //
	////////////
	private op void addParticipant();
	private op void changeParticipant(String nom);
	private op void changerIntervalle();
	private op void menu();
	private op void participantSaisirDates(String nom);
	private op void participantSupprimerDates(String nom);
	private op void participantDatesPreferentielles(String nom);
	private op void participantDatesExclues(String nom);
	private op void participantSupprimerDatesPreferentielles(String nom);
	private op void participantSupprimerDatesExclues(String nom);
	private op void chooseParticipant();
	private op void participantNom(String nom);
	private op void evalBestDate();
	
	/**
	* Interface menu
	*/
	private void menu(){
		Scanner sc = new Scanner(System.in);
		System.out.println("# Menu");
		System.out.println("1) Définir l'intervalle");
		System.out.println("2) Ajouter un participant");
		System.out.println("3) Modifier un participant");
		System.out.println("4) Calculer la meilleure date");
		this.showCommands();
		String choix = sc.nextLine();
		if(choix.equals("1")){
			send changerIntervalle();
		}
		else if (choix.equals("2")){
			send addParticipant();
		}
		else if (choix.equals("3")){
			send chooseParticipant();
		}
		else if (choix.equals("4")){
			send evalBestDate();
		}
		else if(choix.equals("q")){
			System.out.println("Au revoir");
		}
		else{
			send menu();
		}
	}
	
	/**
	* Affiche la date préconisée pour la réunion
	*/
	private void evalBestDate(){
		try{
			System.out.println("Date : " + this.bestDate().toString());
			send menu();
		}
		catch(Exception e){
			System.err.println("Aucune date ne convient pour le moment");
			send menu();
		}
	}
	
	/**
	* Choisit un participant à modifier
	*/
	private void chooseParticipant(){
		Scanner sc = new Scanner(System.in);
		System.out.println("Nom du participant :");
		String nom = sc.nextLine();
		if("q".equals(nom)){
			send menu();
		}
		else if(this.isParticipant(nom)){
			send changeParticipant(nom);
		}
		else{
			System.err.println("Le participant "+nom+" n'existe pas dans l'espace de tuples");
			send chooseParticipant();
		}
	}
	
	/**
	* Permet de modifier un participant
	* @param nom Le lom du participant
	*/
	private void changeParticipant(String nom){
		Scanner sc = new Scanner(System.in);
		System.out.println("Que voulez-vous faire pour "+nom);
		System.out.println("1) Changer son nom");
		System.out.println("2) Ajouter des dates");
		System.out.println("3) Supprimer des dates");
		this.showCommands();
		String choix = sc.nextLine();
		if("1".equals(choix)){
			send participantNom(nom);
		}
		else if("2".equals(choix)){
			send participantSaisirDates(nom);
		}
		else if("3".equals(choix)){
			send participantSupprimerDates(nom);
		}
		else{
			send menu();
		}
	}
	
	/**
	* Permet de changer le nom d'un participant
	* @param nom Le lom du participant
	*/
	private void participantNom(String nom){
		Scanner sc = new Scanner(System.in);
		System.out.println("Nouveau nom pour "+nom+" :");
		String nouveauNom = sc.nextLine();
		if("q".equals(nouveauNom)){
			send menu();
		}
		else{
			ArrayList<Participant> participants = (ArrayList<Participant>) this.ts.rd("participants");
			for(Participant p : participants){
				if(nom.equals(p.getNom())){
					p.setNom(nouveauNom);
				}
			}
			this.ts.add("participants", participants);
			send changeParticipant(nouveauNom);
		}
	}
	
	/**
	* Ajout d'un participant
	*/
	private void addParticipant(){
		Scanner sc = new Scanner(System.in);
		System.out.println("Nom du participant :");
		String nom = sc.nextLine();
		if(nom.equals("q")){
			System.out.println("Pas de participant ajouté");
			send menu();
		}
		else{
			ArrayList<Participant> participants = (ArrayList<Participant>) this.ts.rd("participants");
			Participant participant = new Participant(nom);
			participants.add(participant);
			send participantSaisirDates(nom);
		}
		
	}
	
	/**
	* Supprimer des dates pour un participant
	* @param nom Le nom du participant
	*/
	private void participantSupprimerDates(String nom){
		Scanner sc = new Scanner(System.in);
		System.out.println("# Supprimer des dates pour "+nom);
		System.out.println("1) Exclues");
		System.out.println("2) Préférentielles");
		this.showCommands();
		String choix = sc.nextLine();
		if(choix.equals("1")){
			send participantSupprimerDatesExclues(nom);
		}
		else if (choix.equals("2")){
			send participantSupprimerDatesPreferentielles(nom);
		}
		else if (choix.equals("q")){
			send changeParticipant(nom);
		}
		else{
			System.err.println("Attention : Option invalide");
			send participantSupprimerDates(nom);
		}
	}
	
	/**
	* Supprimer une date exclue pour un participant
	* @param nom Son nom
	*/
	private void participantSupprimerDatesExclues(String nom){
		Scanner sc = new Scanner(System.in);
		System.out.println("Supprimer une date exclue pour "+nom);
		
		ArrayList<Participant> participants = (ArrayList<Participant>)this.ts.rd("participants");
		for (int i=0; i<participants.size(); i++){
			if(participants.get(i).getNom().equals(nom)){
				ArrayList<Date> datesExclues = (ArrayList<Date>) participants.get(i).getDatesExclues();
				for (int j=0; j<datesExclues.size(); j++){
					System.out.println(j+") "+datesExclues.get(j).toString());
				}
			}
		}
		String date = sc.nextLine();
		
		if(date.equals("q")){
			send participantSupprimerDates(nom);
		}
		else{
			try{
				for(Participant p : participants){
					if(p.getNom().equals(nom)){
						p.removeDateExclue(Integer.parseInt(date));
					}
				}
				this.ts.add("participants", participants);
				send participantSupprimerDatesExclues(nom);
			}catch(Exception e){
				System.out.println("Option invalide : " + date);
				send participantSupprimerDatesExclues(nom);
			}
		}
	}
	
	/**
	* Supprimer une date préférentielle pour un participant
	* @param nom Son nom
	*/
	private void participantSupprimerDatesPreferentielles(String nom){
		Scanner sc = new Scanner(System.in);
		System.out.println("Supprimer une date préférentielle pour "+nom);
		
		ArrayList<Participant> participants = (ArrayList<Participant>)this.ts.rd("participants");
		for (int i=0; i<participants.size(); i++){
			if(participants.get(i).getNom().equals(nom)){
				ArrayList<Date> datesPreferentielles = (ArrayList<Date>) participants.get(i).getDatesPreferentielles();
				for (int j=0; j<datesPreferentielles.size(); j++){
					System.out.println(j+") "+datesPreferentielles.get(j).toString());
				}
			}
		}
		String date = sc.nextLine();
		
		if(date.equals("q")){
			send participantSupprimerDates(nom);
		}
		else{
			try{
				for(Participant p : participants){
					if(p.getNom().equals(nom)){
						p.removeDatePreferentielle(Integer.parseInt(date));
					}
				}
				this.ts.add("participants", participants);
				send participantSupprimerDatesPreferentielles(nom);
			}catch(Exception e){
				System.out.println("Option invalide : " + date);
				send participantSupprimerDatesPreferentielles(nom);
			}
		}
	}
	
	/**
	* Changer les dates d'un participant
	* @param nom Le lom du participant
	*/
	private void participantSaisirDates(String nom){
		Scanner sc = new Scanner(System.in);
		System.out.println("# Ajouter des dates pour "+nom);
		System.out.println("1) Exclues");
		System.out.println("2) Préférentielles");
		this.showCommands();
		String choix = sc.nextLine();
		if(choix.equals("1")){
			send participantDatesExclues(nom);
		}
		else if (choix.equals("2")){
			send participantDatesPreferentielles(nom);
		}
		else if (choix.equals("q")){
			send changeParticipant(nom);
		}
		else{
			System.err.println("Attention : Option invalide");
			send participantSaisirDates(nom);
		}
	}
	
	/**
	* Choisir les dates exclues pour un participant
	* @param nom Le lom du participant
	*/
	private void participantDatesExclues(String nom){
		Scanner sc = new Scanner(System.in);
		System.out.println("Ajouter une date exclue pour "+nom);
		String date = sc.nextLine();
		if(date.equals("q")){
			send participantSaisirDates(nom);
		}
		else{
			try{
				this.addDateExclueOfParticipant(nom, this.formatter.parse(date));
				send participantDatesExclues(nom);
			}
			catch(Exception e){
				System.err.println("La date ou le nom du participant ne convient pas");
				send participantDatesExclues(nom);
			}
		}
	}
	
	/**
	* Choisir les dates préférentielles pour un participant
	* @param nom Le lom du participant
	*/
	private void participantDatesPreferentielles(String nom){
		Scanner sc = new Scanner(System.in);
		System.out.println("Ajouter une date préférentielle pour "+nom);
		String date = sc.nextLine();
		if(date.equals("q")){
			send participantSaisirDates(nom);
		}
		else{
			try{
				this.addDatePreferentielleOfParticipant(nom, this.formatter.parse(date));
				send participantDatesPreferentielles(nom);
			}
			catch(Exception e){
				System.err.println("La date ou le nom du participant ne convient pas");
				send menu();
			}
		}
	}
	
	/**
	* Changer l'intervalle de la réunion
	*/
	private void changerIntervalle(){
		Scanner sc = new Scanner(System.in);
		System.out.println("Veuillez choisir la date de début :");
		String dateDebut = sc.nextLine();
		System.out.println("Veuillez choisir la date de fin :");
		String dateFin = sc.nextLine();
		if(dateDebut.equals("q") || dateFin.equals("q")){
			send menu();
		}
		else{
			try{
				this.setIntervalle(this.formatter.parse(dateDebut), this.formatter.parse(dateFin));
				send menu();
			}
			catch(Exception e){
				System.err.println("Le format de date n'es pas respecté");
				send changerIntervalle();
			}
		}
	}
	
	/////////////////
	// Code métier //
	/////////////////
	
	/**
	* Constructeur
	*/
	public Planification(){
		this.initialize();
		send menu();
	}
	
	/**
	* Ajouter une date exclue d'un participant à partir de son nom
	* @param name Le nom du participant
	* @param date La date à ajouter
	*/
	private void addDateExclueOfParticipant(String name, Date date){
		ArrayList<Participant> participants = (ArrayList<Participant>) this.ts.rd("participants");
		for(Participant p : participants){
			if(name.equals(p.getNom())){
				p.addDateExclue(date);
			}
		}
		this.ts.add("participants", participants);
	}
	
	/**
	* Ajouter une date préférentielle d'un participant à partir de son nom
	* @param name Le nom du participant
	* @param date La date à ajouter
	*/
	private void addDatePreferentielleOfParticipant(String name, Date date){
		ArrayList<Participant> participants = (ArrayList<Participant>) this.ts.rd("participants");
		for(Participant p : participants){
			if(name.equals(p.getNom())){
				p.addDatePreferentielle(date);
			}
		}
		this.ts.add("participants", participants);
	}
	
	/**
	* Affiche les options de l'interface
	*/
	private void showCommands(){
		System.out.println("[q] Pour quitter");
	}
	
	/**
	* Initialisation du constructeur
	*/
	private void initialize(){
		this.ts = new TupleSpace();
		this.formatter = new SimpleDateFormat("dd/MM/yyyy");
		this.ts.out("date debut", new Date());
		this.ts.out("date fin", new Date());
		ArrayList<Participant> participants = new ArrayList<Participant>();
		this.ts.out("participants", participants);
	}
	
	/**
	* Méthode isDansIntervalle
	*/
	public boolean isDansIntervalle(Date date){
		Date dateDebut = (Date) this.ts.rd("date debut");
		Date dateFin = (Date) this.ts.rd("date fin");
		if(dateDebut.before(date) && dateFin.after(date)){
			return true;
		}
		return false;
	}
	
	/**
	* Méthode isDansIntervalle
	*/
	public boolean isDansIntervalle(String stringDate){
		try{
			return this.isDansIntervalle(this.formatter.parse(stringDate));
		}
		catch(Exception e){
			System.err.println("Le format de date n'es pas respecté");
			System.exit(0);
		}
		return false;
	}

	/**
	* Méthode isParticipant
	*/
	public boolean isParticipant(String nom){
		ArrayList<Participant> participants = (ArrayList<Participant>) this.ts.rd("participants");
		for(Participant p : participants){
			if(nom.equals(p.getNom())){
				return true;
			}
		}
		return false;
	}
	
	/**
	* Méthode setIntervalle
	*/
	public void setIntervalle(Date debut, Date fin){
		if(debut.before(fin) || debut.equals(fin)){
			this.ts.add("date debut", debut);
			this.ts.add("date fin", fin);
			System.err.println("L'intervalle a bien été définit");
		}
		else{
			System.err.println("Attention : La date de début n'est pas avant la date de fin");
		}
	}
	
	/**
	* Méthode setIntervalle
	*/
	public void setIntervalle(String stringDebut, String stringFin){
		try{
			Date debut = this.formatter.parse(stringDebut);
			Date fin = this.formatter.parse(stringFin);
			this.setIntervalle(debut, fin);
		}
		catch(Exception e){
			System.err.println("Le format de date n'es pas respecté");
			System.exit(0);
		}
	}
	
	/**
	* Vérifie si 3/4 des participants sont disponibles à une date
	* @param date La date à vérifier pour les participants 
	*/
	private boolean isTroisQuartParticipants(Date date){
		ArrayList<Participant> participants = (ArrayList<Participant>) this.ts.rd("participants");
		double size = (double)participants.size();
		double troisQuart = ((3*size) /4);
		double nbDisponibles = 0.0;
		for(int i = 0; i < size; i++){
			if(participants.get(i).isDispoPourDate(date)){
				nbDisponibles = nbDisponibles+1.0;
			}
		}
		if(nbDisponibles >= troisQuart){
			return true;
		}
		return false;
	}
	
	/**
	* Compte le nombre de dates préférentielles pour une date précise en fonction des participants
	* @return Le nombre de dates
	*/
	private int compteDatePreferentielle(Date date){
		ArrayList<Participant> participants = (ArrayList<Participant>) this.ts.rd("participants");
		int cpt = 0;
		for(Participant participant: participants){
			if(participant.checkDatePreferentielle(date)){
				cpt++;
			}
		}
		return cpt;
	}
	
	/**
	* Retourne la date la plus intéressante pour la réunion
	* @return La meilleure date si elle existe
	*/
	private Date bestDate(){
		try{
			Date dateCourante = selectFirstDatePotable();
			Date dateFin = (Date) this.ts.rd("date fin");
			Date dateChoisie = dateCourante;
			int compte = this.compteDatePreferentielle(dateChoisie);
			while(dateCourante.before(dateFin)){
				if(this.isTroisQuartParticipants(dateCourante)){
					if(compte < this.compteDatePreferentielle(dateCourante)){
						dateChoisie = dateCourante;
						compte = this.compteDatePreferentielle(dateChoisie);
					}
				}
				dateCourante = this.addDays(dateCourante, 1);
			}
			return dateChoisie;
		}catch(Exception e){
			return null;
		}
	}
	
	/**
	* Retourne la première date pouvant convenir aux participants
	* @return La date pourvant convenir
	*/
	private Date selectFirstDatePotable(){
		Date dateCourante = (Date) this.ts.rd("date debut");
		Date dateFin = (Date) this.ts.rd("date fin");
		while(dateCourante.before(dateFin)){
			if(this.isTroisQuartParticipants(dateCourante)){
				return dateCourante;
			}
			dateCourante = this.addDays(dateCourante, 1);
		}
		return null;
	}
	
	/**
	* Ajoute un jour à une date
	* @return La date incrémentée d'un jour
	*/
	private Date addDays(Date date, int days){
		Calendar cal = Calendar.getInstance();
		cal.setTime(date);
		cal.add(Calendar.DATE, days);
		return cal.getTime();
	}

	/**
	* Lancement du programme
	*/
	public static void main(String[] args){
		new Planification();
	}
}
