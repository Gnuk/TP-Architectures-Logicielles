import java.util.Date;
import java.util.ArrayList;
import java.text.SimpleDateFormat;
/**
* TP d'Architectures Logicielles Planification d'une réunion de travail
* @author Anthony REY <anthony.rey@etu.univ-savoie.fr>
* @author Yohann Berthon <yohann.berthon@etu.univ-savoie.fr>
* @since 15/04/2013
*/
public class Planification{

	private TupleSpace ts;
	private Date dateDebut;
	private Date dateFin;
	private ArrayList<Participant> participants;
	private SimpleDateFormat formatter;

	/**
	* Constructeur
	*/
	public Planification(){
		this.formatter = new SimpleDateFormat("dd/MM/yyyy");
		this.ts = new TupleSpace();
		
		System.out.println("Mon Planificateur");
		this.participants = new ArrayList<Participant>();
		
// 		ArrayList<Participant> participants = new ArrayList<Participant>();
// 		Participant henri = new Participant("Henri");
// 		henri.addDatesExclues("05/02/2013");
// 		henri.addDatesExclues("12/05/2013");
// 		henri.addDatesExclues("03/07/2013");
// 		henri.addDatesExclues("25/09/2013");
// 		participants.add(henri);
// 		
// 		this.ts.out("Participants", participants);

// 		this.testTS();
		// 01/02/2013 - 01/10/2013
		this.setIntervalle("01/02/2013", "01/10/2013");
		System.out.println(this.dateDebut.toString() + " :: " + this.dateFin.toString());
		//this.setIntervalle(new Date(1357081200000L), new Date(1357772400000L));
		System.out.println(this.isDansIntervalle("01/04/2013"));
		System.out.println(this.isDansIntervalle("01/11/2013"));
	}
	
	/**
	* Méthode isDansIntervalle
	*/
	public boolean isDansIntervalle(Date date){
		if(this.dateDebut.before(date) && this.dateFin.after(date)){
			return true;
		}
		return false;
	}
	
	/**
	* Méthode isDansIntervalle
	*/
	public boolean isDansIntervalle(String stringDate){
		try{
			return this.isDansIntervalle(this.formatter.parse(stringDate));
		}
		catch(Exception e){
			System.err.println("Le format de date n'es pas respecté");
			System.exit(0);
		}
		return false;
	}
	
	/**
	* Méthode setIntervalle
	*/
	public void setIntervalle(Date debut, Date fin){
		if(debut.before(fin)){
			this.dateDebut = debut;
			this.dateFin = fin;
		}
		else{
			System.err.println("Attention : La date de début n'est pas avant la date de fin");
			System.exit(0);
		}
	}
	
	/**
	* Méthode setIntervalle
	*/
	public void setIntervalle(String stringDebut, String stringFin){
		try{
			Date debut = this.formatter.parse(stringDebut);
			Date fin = this.formatter.parse(stringFin);
			this.setIntervalle(debut, fin);
		}
		catch(Exception e){
			System.err.println("Le format de date n'es pas respecté");
			System.exit(0);
		}
	}
	
	/**
	* Vérifie si 3/4 des participants sont disponibles à une date
	* @param date La date à vérifier pour les participants 
	*/
	private boolean isTroisQuartParticipants(Date date){
		int size = this.participants.size();
		int troisQuart = ((3*size) /4);
		int nbDisponibles = 0;
		for(int i = 0; i < size; i++){
			if(this.participants.get(i).isDispoPourDate(date)){
				nbDisponibles++;
			}
		}
		if(nbDisponibles >= troisQuart){
			return true;
		}
		return false;
	}
	
	private int compteDatePreferentielle(Date date){
		int cpt = 0;
		for(Participant participant: this.participants){
			if(participant.checkDatePreferentielle(date)){
				cpt++;
			}
		}
		return cpt;
	}
	
	
	/**
	* Méthode testTS
	*/
	public void testTS(){
		System.out.println("== Début du jeu de tests ==");
		TupleSpace tuples = new TupleSpace();
		tuples.out("42", 33);
		tuples.out("42", 42);
		System.out.println(tuples.rd("42"));
		tuples.add("42", 25);
		System.out.println(tuples.rd("42"));
		System.out.println(tuples.in("42"));
		System.out.println(tuples.in("42"));
		System.out.println(tuples.in("42"));
		System.out.println("== Fin du jeu de tests ==");
	}

	/**
	* Lancement du programme
	*/
	public static void main(String[] args){
		new Planification();
	}
}
