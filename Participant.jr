import java.util.Date;
import java.util.ArrayList;
import java.text.SimpleDateFormat;

/**
* Classe Participant
* @author Anthony REY <anthony.rey@etu.univ-savoie.fr>
* @author Yohann Berthon <yohann.berthon@etu.univ-savoie.fr>
* @since 15/04/2013
*/
public class Participant{
	//private ArrayList<Date> datesExclues;
	//private ArrayList<Date> datesPreferentielles;
	//private String nom;
	private SimpleDateFormat formatter;
	private TupleSpace ts;
	
	/**
	* Constructeur sans les dates
	*/
	public Participant(String nom){
		this.initialize();
		this.ts.out("nom", nom);
		//this.nom = nom;
		this.ts.out("dates exclues", new ArrayList<Date>());
		//this.datesExclues = new ArrayList<Date>();
		this.ts.out("dates preferentielles", new ArrayList<Date>());
		//this.datesPreferentielles = new ArrayList<Date>();
	}
	
	/**
	* Constructeur avec les dates
	*/
	public Participant(String nom, ArrayList<Date> datesExclues, ArrayList<Date> datesPreferentielles){
		this.initialize();
		this.ts.out("nom", nom);
		//this.nom = nom;
		this.ts.out("dates exclues", datesExclues);
		//this.datesExclues = datesExclues;
		this.ts.out("dates preferentielles", datesPreferentielles);
		//this.datesPreferentielles = datesPreferentielles;
	}
	
	private void initialize(){
		this.ts = new TupleSpace();
		this.formatter = new SimpleDateFormat("dd/MM/yyyy");
	}
	
	/**
	* Récupère la liste des dates exclues
	* @return Liste des dates
	*/
	public ArrayList<Date> getDatesExclues(){
		return (ArrayList<Date>) this.ts.rd("dates exclues");
	}
	
	/**
	* Ajoute une nouvelle date exclue
	* @param date La date à ajouter
	*/
	public void addDateExclue(Date date){
		ArrayList<Date> dates = (ArrayList<Date>) this.ts.in("dates exclues");
		dates.add(date);
		this.ts.out("dates exclues", dates);
	}
	
	/**
	* Ajoute une nouvelle date exclue
	* @param stringDate La date à ajouter au format MM/dd/yyyy
	*/
	public void addDateExclue(String stringDate){
		try{
			this.addDateExclue(this.formatter.parse(stringDate));
		}
		catch(Exception e){
			System.err.println("Le format de date n'es pas respecté");
			System.exit(0);
		}
	}
	
	/**
	* Récupère la liste des dates préférentielles
	* @return Liste des dates
	*/
	public ArrayList<Date> getDatePreferentielles(){
		return (ArrayList<Date>) this.ts.rd("dates preferentielles");
	}
	
	/**
	* Ajoute une nouvelle date préférentielle
	* @param date La date à ajouter
	*/
	public void addDatePreferentielle(Date date){
		ArrayList<Date> dates = (ArrayList<Date>) this.ts.in("dates preferentielles");
		dates.add(date);
		this.ts.out("dates preferentielles", dates);
	}
	
	/**
	* Ajoute une nouvelle date préférentielle
	* @param stringDate La date à ajouter au format MM/dd/yyyy
	*/
	public void addDatePreferentielle(String stringDate){
		try{
			this.addDatePreferentielle(this.formatter.parse(stringDate));
		}
		catch(Exception e){
			System.err.println("Le format de date n'es pas respecté");
			System.exit(0);
		}
	}
	
	/**
	* Vérifie si un participant est disponible pour une date
	* @param date La date à vérifier
	*/
	public boolean isDispoPourDate(Date date){
		ArrayList<Date> datesExclues = (ArrayList<Date>) this.ts.rd("dates exclues");
		for(int i = 0; i < datesExclues.size(); i++){
			if(datesExclues.get(i).equals(date)){
				return false;
			}
		}
		return true;
	}
	
	/**
	* Vérifie si une date est parmis les dates préférées du participant
	* @param date La date à vérifier
	*/
	public boolean checkDatePreferentielle(Date date){
		ArrayList<Date> datesPreferentielles = (ArrayList<Date>) this.ts.rd("dates preferentielles");
		for(int i = 0; i < datesPreferentielles.size(); i++){
			if(datesPreferentielles.get(i).equals(date)){
				return true;
			}
		}
		return false;
	}
}